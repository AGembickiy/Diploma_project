from rest_framework import viewsets, permissions, status, serializers
from rest_framework.decorators import action
from rest_framework.response import Response
from django.core.mail import send_mail
from django.conf import settings
from django.template.loader import render_to_string
from django.utils.html import strip_tags
from .models import Response
from .serializers import ResponseSerializer, ResponseStatusSerializer

class ResponseViewSet(viewsets.ModelViewSet):
    """ViewSet –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–∞–º–∏"""
    serializer_class = ResponseSerializer
    permission_classes = [permissions.IsAuthenticated]
    
    def get_queryset(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–∫–ª–∏–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = self.request.user
        
        if self.action == 'my_responses':
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Å–≤–æ–∏ –æ—Ç–∫–ª–∏–∫–∏
            return Response.objects.filter(author=user)
        elif self.action == 'advertisement_responses':
            # –ê–≤—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏—Ç –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ —Å–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            advertisement_id = self.kwargs.get('advertisement_id')
            return Response.objects.filter(advertisement_id=advertisement_id, advertisement__author=user)
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Å–≤–æ–∏ –æ—Ç–∫–ª–∏–∫–∏
            return Response.objects.filter(author=user)
    
    def perform_create(self, serializer):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–∫–ª–∏–∫ –Ω–∞ —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            advertisement_id = serializer.validated_data.get('advertisement_id')
            user = self.request.user
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            from advertisements.models import Advertisement
            try:
                advertisement = Advertisement.objects.get(id=advertisement_id)
                if advertisement.author == user:
                    raise serializers.ValidationError(
                        "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫ –Ω–∞ —Å–≤–æ–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ."
                    )
            except Advertisement.DoesNotExist:
                raise serializers.ValidationError("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            
            existing_response = Response.objects.filter(
                advertisement_id=advertisement_id,
                author=user
            ).first()
            
            if existing_response:
                raise serializers.ValidationError(
                    f"–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∫–ª–∏–∫ –Ω–∞ —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. "
                    f"–í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–∫–ª–∏–∫: '{existing_response.text[:50]}...'"
                )
            
            response = serializer.save()
            print(f'‚úÖ –û—Ç–∫–ª–∏–∫ —Å–æ–∑–¥–∞–Ω: ID {response.id}, –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {response.advertisement.title}')
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            self.send_response_notification(response)
            
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–∫–ª–∏–∫–∞: {e}')
            raise
    
    def perform_update(self, serializer):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫–ª–∏–∫–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        old_status = serializer.instance.status
        response = serializer.save()
        
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if old_status != response.status:
            self.send_status_change_notification(response, old_status)
    
    def send_response_notification(self, response):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –æ—Ç–∫–ª–∏–∫–µ"""
        try:
            print(f'üìß –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...')
            
            advertisement = response.advertisement
            author_email = advertisement.author.email
            author_username = advertisement.author.username
            
            print(f'üìß –î–∞–Ω–Ω—ã–µ –¥–ª—è email:')
            print(f'   - –û–±—ä—è–≤–ª–µ–Ω–∏–µ: {advertisement.title}')
            print(f'   - –ê–≤—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {author_username}')
            print(f'   - Email –∞–≤—Ç–æ—Ä–∞: {author_email}')
            print(f'   - –ê–≤—Ç–æ—Ä –æ—Ç–∫–ª–∏–∫–∞: {response.author.username}')
            print(f'   - –¢–µ–∫—Å—Ç –æ—Ç–∫–ª–∏–∫–∞: {response.text[:50]}...')
            
            subject = f'–ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ "{advertisement.title}"'
            
            # HTML –≤–µ—Ä—Å–∏—è –ø–∏—Å—å–º–∞
            html_message = render_to_string('responses/email/new_response.html', {
                'author_username': author_username,
                'advertisement_title': advertisement.title,
                'response_text': response.text,
                'respondent_username': response.author.username,
                'site_url': getattr(settings, 'SITE_URL', 'http://localhost:3001')
            })
            
            # –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø–∏—Å—å–º–∞
            plain_message = strip_tags(html_message)
            
            print(f'üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email...')
            
            send_mail(
                subject=subject,
                message=plain_message,
                from_email=settings.DEFAULT_FROM_EMAIL,
                recipient_list=[author_email],
                html_message=html_message,
                fail_silently=False,
            )
            
            print(f'‚úÖ Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {author_email}')
            
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}')
            print(f'‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}')
            import traceback
            print(f'‚ùå Traceback: {traceback.format_exc()}')
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ email
    
    def send_status_change_notification(self, response, old_status):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫–ª–∏–∫–∞"""
        try:
            advertisement = response.advertisement
            respondent_email = response.author.email
            respondent_username = response.author.username
            
            status_labels = {
                'accepted': '–ø—Ä–∏–Ω—è—Ç',
                'rejected': '–æ—Ç–∫–ª–æ–Ω–µ–Ω'
            }
            
            subject = f'–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –æ—Ç–∫–ª–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "{status_labels.get(response.status, response.status)}"'
            
            # HTML –≤–µ—Ä—Å–∏—è –ø–∏—Å—å–º–∞
            html_message = render_to_string('responses/email/status_change.html', {
                'respondent_username': respondent_username,
                'advertisement_title': advertisement.title,
                'old_status': status_labels.get(old_status, old_status),
                'new_status': status_labels.get(response.status, response.status),
                'site_url': settings.SITE_URL
            })
            
            # –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø–∏—Å—å–º–∞
            plain_message = strip_tags(html_message)
            
            send_mail(
                subject=subject,
                message=plain_message,
                from_email=settings.DEFAULT_FROM_EMAIL,
                recipient_list=[respondent_email],
                html_message=html_message,
                fail_silently=False,
            )
            
            print(f'‚úÖ Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {respondent_email}')
            
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}')
    
    @action(detail=False, methods=['get'])
    def my_responses(self, request):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–∫–ª–∏–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        responses = self.get_queryset()
        serializer = ResponseSerializer(responses, many=True)
        return Response(serializer.data)
    
    @action(detail=False, methods=['get'])
    def advertisement_responses(self, request, advertisement_id=None):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è)"""
        responses = self.get_queryset()
        serializer = ResponseSerializer(responses, many=True)
        return Response(serializer.data)
    
    @action(detail=True, methods=['patch'])
    def change_status(self, request, pk=None):
        """–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è)"""
        response = self.get_object()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        if response.advertisement.author != request.user:
            return Response(
                {'error': '–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ —Å–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è'},
                status=status.HTTP_403_FORBIDDEN
            )
        
        serializer = ResponseStatusSerializer(response, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
